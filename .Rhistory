for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
test<-findAvg(runs=1,percVacc=0)
test2<-findAvg(runs=1,vaccEff=list("spread"=0.7,"catch"=0.6))
test3<-findAvg(runs=1,percVacc=0.7)
results <- cbind(name="Base Case",baseCase$summary)
results <- rbind(results,cbind(name="No Vacc",test$summary))
results <- rbind(results,cbind(name="More Effective Vacc",test2$summary))
results <- rbind(results,cbind(name="More Vacc",test3$summary))
kable(results)
popPlot(baseCase$populations,"Base Case")
popPlot(test$populations,"test")
popPlot(test2$populations,"test2")
popPlot(test3$populations,"test3")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(knitr)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.subjectTeachers <- 0
default.maxTime <- 100
#Rate of infection + background
default.backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
default.gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=67/100,"TN"=99850/99900),"PCR"=list("TP"=92/100,"TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
default.quarantineTime=10
default.catchRate <- 0.7
default.testDays <- c(5,0)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 3
default.teacherInfectible <- 1.5
default.teacherTeacher <- 1.5
default.nonClass <- 0.7
default.weekend <- c(0.3,10)
default.maxIPeriod <- 20
default.percVacc <- 0.2
default.vaccEff <- list("spread"=0.4,"catch"=0.3)
default.whoMask <- c("s","t")
default.maskEff <- 0.15
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
vaccinated<-sample(186,20)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(knitr)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.subjectTeachers <- 0
default.maxTime <- 100
#Rate of infection + background
default.backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
default.gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=67/100,"TN"=99850/99900),"PCR"=list("TP"=92/100,"TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
default.quarantineTime=10
default.catchRate <- 0.7
default.testDays <- c(5,0)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 3
default.teacherInfectible <- 1.5
default.teacherTeacher <- 1.5
default.nonClass <- 0.7
default.weekend <- c(0.3,10)
default.maxIPeriod <- 20
default.percVacc <- 0.2
default.vaccEff <- list("spread"=0.4,"catch"=0.3)
default.whoMask <- c("s","t")
default.maskEff <- 0.15
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(knitr)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.subjectTeachers <- 0
default.maxTime <- 100
#Rate of infection + background
default.backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
default.gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=67/100,"TN"=99850/99900),"PCR"=list("TP"=92/100,"TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
default.quarantineTime=10
default.catchRate <- 0.7
default.testDays <- c(5,0)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 3
default.teacherInfectible <- 1.5
default.teacherTeacher <- 1.5
default.nonClass <- 0.7
default.weekend <- c(0.3,10)
default.maxIPeriod <- 20
default.percVacc <- 0.2
default.vaccEff <- list("spread"=0.4,"catch"=0.3)
default.whoMask <- c("s","t")
default.maskEff <- 0.15
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
test<-findAvg(runs=1,percVacc=0)
test2<-findAvg(runs=1,vaccEff=list("spread"=0.7,"catch"=0.6))
test3<-findAvg(runs=1,percVacc=0.7)
results <- cbind(name="Base Case",baseCase$summary)
results <- rbind(results,cbind(name="No Vacc",test$summary))
results <- rbind(results,cbind(name="More Effective Vacc",test2$summary))
results <- rbind(results,cbind(name="More Vacc",test3$summary))
kable(results)
popPlot(baseCase$populations,"Base Case")
popPlot(test$populations,"test")
popPlot(test2$populations,"test2")
popPlot(test3$populations,"test3")
baseCase
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10,"v"=res$v,"tl"=res$tl)
return(result)
}
x<-findAvg(runs=1)
x
tl<-x$tl
tl
tl[[100]]
vaccinated
v<-x$v
v
x
tl
tl[[100]]
tl[[100]][v,]
which(tl[[100]][v,state]=="R")
which(tl[[100]][v,"state"]=="R")
which(tl[[100]][v,"state"]=="R")
tl[[100]][v,]
tl[[100]][v,"state"]
which(tl[[100]][v,"state"]=="R")
length(which(tl[[100]][v,"state"]=="R"))
length(which(tl[[100]][-v,"state"]=="R"))
length(which(tl[[100]][v,"state"]=="R"))
length(which(tl[[100]][v,"state"]%in%c("I",R")))
length(which(tl[[100]][v,"state"]%in% c("I",R")))
length(which(tl[[100]][v,"state"]%in% c("I","R")))
length(which(tl[[100]][v,"state"]== c("I","R")))
length(which(tl[[100]][v,"state"]== "R")
)
length(which(tl[[100]][v,"state"]== "R" or tl[[100]][v,"state"]== "I"))
length(which(tl[[100]][v,"state"]== "R" || tl[[100]][v,"state"]== "I"))
length(which(tl[[100]][v,"state"]== "R" | tl[[100]][v,"state"]== "I"))
sample(120,0)
vaccinated[sample(120,0)]
vaccinated[-sample(120,0)]
vaccinated[-0]
vaccinated[0]
vaccinated[1]
vaccinated
vaccinated[-None]
Null
None
null
none
NaN
vaccinated[-NaN]
vaccinated
integer(0)
integer(0) == integer(0)
vaccinated[-100]
vaccinated[-Inf]
vaccinated[-10000]
vaccinated[10000]
vaccinated[-]
vaccinated[-,]
vaccinated[-100]
vaccinated[--1]
vaccinated[-(-1)]
tibble(vaccinated)
vaccinated<-tibble(vaccinated)
vaccinated[-1,]
vaccinated[-1:10,]
vaccinated[-1:-10,]
vaccinated[-100,]
vaccinated[-1000,]
vaccinated[100,]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(knitr)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.subjectTeachers <- 0
default.maxTime <- 100
#Rate of infection + background
default.backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
default.gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=67/100,"TN"=99850/99900),"PCR"=list("TP"=92/100,"TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
default.quarantineTime=10
default.catchRate <- 0.7
default.testDays <- c(5,0)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 3
default.teacherInfectible <- 1.5
default.teacherTeacher <- 1.5
default.nonClass <- 0.7
default.weekend <- c(0.3,10)
default.maxIPeriod <- 20
default.percVacc <- 0.2
default.vaccEff <- list("spread"=0.4,"catch"=0.3)
default.whoMask <- c("s","t")
default.maskEff <- 0.15
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
test<-findAvg(runs=1,percVacc=0)
rlang:last_error()
rlang::last_error()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(knitr)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.subjectTeachers <- 0
default.maxTime <- 100
#Rate of infection + background
default.backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
default.gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=67/100,"TN"=99850/99900),"PCR"=list("TP"=92/100,"TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
default.quarantineTime=10
default.catchRate <- 0.7
default.testDays <- c(5,0)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 3
default.teacherInfectible <- 1.5
default.teacherTeacher <- 1.5
default.nonClass <- 0.7
default.weekend <- c(0.3,10)
default.maxIPeriod <- 20
default.percVacc <- 0.2
default.vaccEff <- list("spread"=0.4,"catch"=0.3)
default.whoMask <- c("s","t")
default.maskEff <- 0.15
findAvg <- function(classSize=default.classSize,noYears=default.noYears,subjectTeachers=default.subjectTeachers,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))),"populations"=populations/10)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste(default.subjectTeachers,"subject teachers"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white")
}
baseCase<-findAvg(runs=1)
test<-findAvg(runs=1,percVacc=0)
test2<-findAvg(runs=1,vaccEff=list("spread"=0.7,"catch"=0.6))
test3<-findAvg(runs=1,percVacc=0.7)
results <- cbind(name="Base Case",baseCase$summary)
results <- rbind(results,cbind(name="No Vacc",test$summary))
results <- rbind(results,cbind(name="More Effective Vacc",test2$summary))
results <- rbind(results,cbind(name="More Vacc",test3$summary))
kable(t(results))
popPlot(baseCase$populations,"Base Case")
popPlot(test$populations,"test")
popPlot(test2$populations,"test2")
popPlot(test3$populations,"test3")
tl
timeList
c("s","t")
c("s","s","t","s")
which(c("s","s","t","s")=="s")
which(c("s","s","t","s") %in% c("s","t"))
which(c("s","s","t","s") %in% c("s"))
which(c("s","s","t","s") %in% c("t"))
which(c("s","s","t","s") %in% c())
?kable

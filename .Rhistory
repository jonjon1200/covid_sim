teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
#results <- sapply(1:10,function(n) source("sim.R")$value)
barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
paste("Total time spent quarantining was",totalQ)
paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
paste("Infeciton died out in",infectionEnd,"days")
paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
paste("The average variance of students in class was",meanVar)
paste("The maximum number of students absent in a single class at a given time was",classMax)
print(runTime)
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
# #results <- sapply(1:10,function(n) source("sim.R")$value)
# barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
# legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
# paste("Total time spent quarantining was",totalQ)
# paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
# paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
# paste("Infeciton died out in",infectionEnd,"days")
# paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
# paste("The average variance of students in class was",meanVar)
# paste("The maximum number of students absent in a single class at a given time was",classMax)
# print(runTime)
sim()
x <- sim()
print(x)
print(x)
print(x)
x <- sim()
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
x<-sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod)
# #results <- sapply(1:10,function(n) source("sim.R")$value)
# barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
# legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
# paste("Total time spent quarantining was",totalQ)
# paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
# paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
# paste("Infeciton died out in",infectionEnd,"days")
# paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
# paste("The average variance of students in class was",meanVar)
# paste("The maximum number of students absent in a single class at a given time was",classMax)
# print(runTime)
x
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
x<-sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod)
# #results <- sapply(1:10,function(n) source("sim.R")$value)
# barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
# legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
# paste("Total time spent quarantining was",totalQ)
# paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
# paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
# paste("Infeciton died out in",infectionEnd,"days")
# paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
# paste("The average variance of students in class was",meanVar)
# paste("The maximum number of students absent in a single class at a given time was",classMax)
# print(runTime)
x
tb<-Sys.time()
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(ggplot2)
library(knitr)
library(formatR)
library(dplyr)
library(shiny)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
load("variables.Rdata")
# classSize <- 30
# noYears <- 6
# subjectTeachers <- 0
# maxTime <- 100
# #Rate of infection + background
# backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
# gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
# testType <- "L"
# probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
# #https://www.bmj.com/content/373/bmj.n1411/rr
# #https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
# quarantineTime=10
# catchRate <- 0.7
# testDays <- c(5,7)
# startingInfected <- 5
# quarantineThreshold <- 30
# teacherInfective <- 3
# teacherInfectible <- 1.5
# teacherTeacher <- 1.5
# nonClass <- 0.7
# weekend <- c(0.3,10)
# maxIPeriod <- 20
# save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
gammaRate <- function(infected, year, tOrS){
if(nrow(infected)==0){return (0)}
inClass <- infected[which(infected["yearID"]==2),]
outClass <- infected[!infected["studentID"] %in% inClass["studentID"],]
if (dim(inClass[which(inClass["studentOrTeacher"]=="t"),])[1]!=0){
inClass[which(inClass["studentOrTeacher"]=="t"),]["spreadMult"] <- sapply(inClass[which(inClass["studentOrTeacher"]=="t"),]["spreadMult"], function(a) as.character(as.double(a)*teacherInfective)) #Teachers n times infective as typical student
}
if (tOrS == "t"){
if (dim(inClass)[1]!=0){
inClass["spreadMult"] <- sapply(inClass["spreadMult"], function(a) as.character(as.double(a)*teacherInfectible)) #Teacher n times infectible
}
if (dim(outClass[which(outClass["studentOrTeacher"]=="t"),])[1]!=0){
outClass[which(outClass["studentOrTeacher"]=="t"),]["spreadMult"] <- sapply(outClass[which(outClass["studentOrTeacher"]=="t"),]["spreadMult"], function(a) as.character(as.double(a)*teacherTeacher)) #Teachers n times likely to spread to each other
}
}
inGamma <- apply(inClass, 1, function (a)
dgamma(as.double(a["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])*as.double(a["spreadMult"]) )
outGamma <-apply(outClass, 1, function (a)
dgamma(as.double(a["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])*as.double(a["spreadMult"]) )*nonClass #Discount non class
scaledGamma <- (sum(inGamma)+sum(outGamma))/dgamma(gammaParams["spread.shape"]*gammaParams["spread.scale"],shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])
return(scaledGamma)
}
newState <- function(time, student){
if(student["state"]=="S"){
infected <- subset(timeList[[time]],(state=="I")) #Auto doesn't include student as already known to be in S
studentNo <- gammaRate(infected, student["yearID"], student["studentOrTeacher"])
if ((time%%7) %in% c(6,7)){
studentNo <- studentNo*weekend[1]
backgroundROI <- backgroundROI*weekend[2]
}#Basic weekend discount
lambda <- backgroundROI + as.double(student["catchMult"][[1]]) * catchRate *  studentNo/popSize
coinFlipI <- rbinom(1,1,lambda)
coinFlipQ <- rbinom(1,1,(1-probs[[testType]][["TN"]]) * as.numeric((time%%7) %in% testDays))
if (coinFlipQ==1){
student["state"]="Q"
student["timeInState"]=1
}else if (coinFlipI>0){
student["state"]="I"
student["timeInState"]=1
}else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
}
else if(student["state"]=="I"){
lambda <- dgamma(as.double(student["timeInState"][[1]]),shape=gammaParams["recover.shape"],scale=gammaParams["recover.scale"])
scaledInfectiousness <-  dgamma(as.double(student["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"]) / dgamma(gammaParams["spread.shape"]*gammaParams["spread.scale"],shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])
coinFlipI <- rbinom(1,1,lambda)
coinFlipQ <- rbinom(1,1,probs[[testType]][["TP"]]*scaledInfectiousness)
if (coinFlipQ == 1 && (time%%7) %in% testDays){
student["state"]="Q"
student["timeInState"]=1
}else if ( coinFlipI == 1 || as.double(student["timeInState"])==maxIPeriod){
student["state"]="R"
student["timeInState"]=1
}else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
}
else if(student["state"]=="Q"){
if (student["timeInState"]==quarantineTime){
student["state"]="R"
student["timeInState"]=1
}else{
student["timeInState"]=as.double(student["timeInState"])+1
}
}
else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
return (student)
}
popSize <- (classSize+1)*noYears + subjectTeachers
studentID = c(1:popSize)
yearID <- sort(rep(1:noYears,(classSize+1)))
spreadMult = rnorm(popSize, mean=1, sd=0.1)
catchMult = rnorm(popSize, mean=1, sd=0.1)
state = rep("S", popSize)
state[sample.int(popSize,startingInfected)]<-"I"
timeInState = rep(1,popSize)
studentOrTeacher <- rep(c(rep("s",classSize),"t"),noYears)
school <- tibble(studentID, yearID, spreadMult, catchMult, state, timeInState, studentOrTeacher)
multFrame <- tibble(studentID, spreadMult, catchMult)
timeList <- list(school)
for (i in (2:maxTime)){
tempYear <- as_tibble(t(apply(timeList[[i-1]],1,newState,time=i-1)))
timeList <- append(timeList, list(tempYear))
}
tb<-Sys.time()
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(ggplot2)
library(knitr)
library(formatR)
library(dplyr)
library(shiny)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
load("variables.Rdata")
# classSize <- 30
# noYears <- 6
# subjectTeachers <- 0
# maxTime <- 100
# #Rate of infection + background
# backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
# gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
# testType <- "L"
# probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
# #https://www.bmj.com/content/373/bmj.n1411/rr
# #https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
# quarantineTime=10
# catchRate <- 0.7
# testDays <- c(5,7)
# startingInfected <- 5
# quarantineThreshold <- 30
# teacherInfective <- 3
# teacherInfectible <- 1.5
# teacherTeacher <- 1.5
# nonClass <- 0.7
# weekend <- c(0.3,10)
# maxIPeriod <- 20
# save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
gammaRate <- function(infected, year, tOrS){
if(nrow(infected)==0){return (0)}
inClass <- infected[which(infected["yearID"]==2),]
outClass <- infected[!infected["studentID"] %in% inClass["studentID"],]
if (dim(inClass[which(inClass["studentOrTeacher"]=="t"),])[1]!=0){
inClass[which(inClass["studentOrTeacher"]=="t"),]["spreadMult"] <- sapply(inClass[which(inClass["studentOrTeacher"]=="t"),]["spreadMult"], function(a) as.character(as.double(a)*teacherInfective)) #Teachers n times infective as typical student
}
if (tOrS == "t"){
if (dim(inClass)[1]!=0){
inClass["spreadMult"] <- sapply(inClass["spreadMult"], function(a) as.character(as.double(a)*teacherInfectible)) #Teacher n times infectible
}
if (dim(outClass[which(outClass["studentOrTeacher"]=="t"),])[1]!=0){
outClass[which(outClass["studentOrTeacher"]=="t"),]["spreadMult"] <- sapply(outClass[which(outClass["studentOrTeacher"]=="t"),]["spreadMult"], function(a) as.character(as.double(a)*teacherTeacher)) #Teachers n times likely to spread to each other
}
}
inGamma <- apply(inClass, 1, function (a)
dgamma(as.double(a["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])*as.double(a["spreadMult"]) )
outGamma <-apply(outClass, 1, function (a)
dgamma(as.double(a["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])*as.double(a["spreadMult"]) )*nonClass #Discount non class
scaledGamma <- (sum(inGamma)+sum(outGamma))/dgamma(gammaParams["spread.shape"]*gammaParams["spread.scale"],shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])
return(scaledGamma)
}
newState <- function(time, student){
if(student["state"]=="S"){
infected <- subset(timeList[[time]],(state=="I")) #Auto doesn't include student as already known to be in S
studentNo <- gammaRate(infected, student["yearID"], student["studentOrTeacher"])
if ((time%%7) %in% c(6,7)){
studentNo <- studentNo*weekend[1]
backgroundROI <- backgroundROI*weekend[2]
}#Basic weekend discount
lambda <- backgroundROI + as.double(student["catchMult"][[1]]) * catchRate *  studentNo/popSize
coinFlipI <- rbinom(1,1,lambda)
coinFlipQ <- rbinom(1,1,(1-probs[[testType]][["TN"]]) * as.numeric((time%%7) %in% testDays))
if (coinFlipQ==1){
student["state"]="Q"
student["timeInState"]=1
}else if (coinFlipI>0){
student["state"]="I"
student["timeInState"]=1
}else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
}
else if(student["state"]=="I"){
lambda <- dgamma(as.double(student["timeInState"][[1]]),shape=gammaParams["recover.shape"],scale=gammaParams["recover.scale"])
scaledInfectiousness <-  dgamma(as.double(student["timeInState"][[1]]),shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"]) / dgamma(gammaParams["spread.shape"]*gammaParams["spread.scale"],shape=gammaParams["spread.shape"],scale=gammaParams["spread.scale"])
coinFlipI <- rbinom(1,1,lambda)
coinFlipQ <- rbinom(1,1,probs[[testType]][["TP"]]*scaledInfectiousness)
if (coinFlipQ == 1 && (time%%7) %in% testDays){
student["state"]="Q"
student["timeInState"]=1
}else if ( coinFlipI == 1 || as.double(student["timeInState"])==maxIPeriod){
student["state"]="R"
student["timeInState"]=1
}else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
}
else if(student["state"]=="Q"){
if (student["timeInState"]==quarantineTime){
student["state"]="R"
student["timeInState"]=1
}else{
student["timeInState"]=as.double(student["timeInState"])+1
}
}
else{
student["timeInState"]<-as.double(student["timeInState"])+1
}
return (student)
}
popSize <- (classSize+1)*noYears + subjectTeachers
studentID = c(1:popSize)
yearID <- sort(rep(1:noYears,(classSize+1)))
spreadMult = rnorm(popSize, mean=1, sd=0.1)
catchMult = rnorm(popSize, mean=1, sd=0.1)
state = rep("S", popSize)
state[sample.int(popSize,startingInfected)]<-"I"
timeInState = rep(1,popSize)
studentOrTeacher <- rep(c(rep("s",classSize),"t"),noYears)
school <- tibble(studentID, yearID, spreadMult, catchMult, state, timeInState, studentOrTeacher)
multFrame <- tibble(studentID, spreadMult, catchMult)
timeList <- list(school)
for (i in (2:maxTime)){
tempYear <- as_tibble(t(apply(timeList[[i-1]],1,newState,time=i-1)))
timeList <- append(timeList, list(tempYear))
}
population <- data.frame("S"=popSize-startingInfected,"I"=startingInfected, "Q"=0, "R"=0)
infectionEnd <- -1
for (i in (2:maxTime)){
Sno <- nrow(filter(timeList[[i]], state=="S"))
Ino <- nrow(filter(timeList[[i]], state=="I"))
Qno <- nrow(filter(timeList[[i]], state=="Q"))
Rno <- popSize-Sno-Ino-Qno
if (infectionEnd == -1 && Ino == 0){infectionEnd <- i}
population <- add_row(population, "S"=Sno, "I"=Ino, "Q"=Qno, "R"=Rno)
}
barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
classVar <- c()
classMax <- 0
for (i in 1:noYears){
tmp <- sapply(timeList,function(a)(nrow(a[which(a["yearID"]==i & a["state"]=="Q"),] )))
classVar <- c(classVar, var(tmp))
classMax <- max(classMax, max(tmp))
}
totalQ<-sum(population["Q"])
avgQ<-round(sum(population["Q"])/popSize,digits=1)
finalI<-population[maxTime,"R"]
overThreshold<-length(population["Q"][population["Q"]>quarantineThreshold])
meanVar<-mean(classVar)
paste("Total time spent quarantining was",totalQ)
paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
paste("Infeciton died out in",infectionEnd,"days")
paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
paste("The average variance of students in class was",meanVar)
paste("The maximum number of students absent in a single class at a given time was",classMax)
runTime<-Sys.time()-tb
print(runTime)
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
x<-sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod)
# #results <- sapply(1:10,function(n) source("sim.R")$value)
# barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
# legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
# paste("Total time spent quarantining was",totalQ)
# paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
# paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
# paste("Infeciton died out in",infectionEnd,"days")
# paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
# paste("The average variance of students in class was",meanVar)
# paste("The maximum number of students absent in a single class at a given time was",classMax)
# print(runTime)
list("a"<-1,"b"<-2)
data.frame("a"<-1,"b"<-2)
list("a"=1,"b"=2)
list("a"=2,"b"=1)
data.frame("a"=2,"b"<-1)
data.frame("a"=2,"b"=1)
list("a"=population,"b"=2)
knitr::opts_chunk$set(echo = TRUE)
classSize <- 30
noYears <- 6
subjectTeachers <- 0
maxTime <- 100
#Rate of infection + background
backgroundROI <- 3300/67000000 #https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
gammaParams <- c("spread.shape"=10,"spread.scale"=0.8,"recover.shape"=17,"recover.scale"=0.8)
testType <- "L"
probs <- list("L"=list("TP"=67/100,"TN"=99850/99900),"P"=list("TP"=95/100,"TN"=99.2/100), "N"=list("TP"=0,"TN"=1))
#https://www.bmj.com/content/373/bmj.n1411/rr
#https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/methodologies/covid19infectionsurveypilotmethodsandfurtherinformation
quarantineTime=10
catchRate <- 0.7
testDays <- c(5,7)
startingInfected <- 5
quarantineThreshold <- 30
teacherInfective <- 3
teacherInfectible <- 1.5
teacherTeacher <- 1.5
nonClass <- 0.7
weekend <- c(0.3,10)
maxIPeriod <- 20
save(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod, file="variables.Rdata")
source("sim.R")$value
x<-sim(classSize, noYears, subjectTeachers, maxTime, backgroundROI, gammaParams, testType, probs, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, nonClass, weekend, maxIPeriod)
# #results <- sapply(1:10,function(n) source("sim.R")$value)
# barplot(t(as.matrix(population)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Students", names.arg=(1:maxTime))
# legend("topright", colnames(population), fill=c("cyan","yellow", "grey","red"), bg="white")
# paste("Total time spent quarantining was",totalQ)
# paste("Average time students spent in isolation was",avgQ,"out of a possible",maxTime)
# paste("Final number of infected individuals was",finalI, "out of a possible",popSize)
# paste("Infeciton died out in",infectionEnd,"days")
# paste("Number of days with more than",quarantineThreshold,"quarantined was",overThreshold)
# paste("The average variance of students in class was",meanVar)
# paste("The maximum number of students absent in a single class at a given time was",classMax)
# print(runTime)
x

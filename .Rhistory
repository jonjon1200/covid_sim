str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg(runs=1)
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)))
))
combineFinal(list(
"No Vacc"=findAvg(percVacc=0),
"Half Vacc"=findAvg(percVacc=0.5),
"3/4 Vacc"=findAvg(percVacc=0.75),
"Full Vacc"=findAvg(percVacc=1)
))
combineFinal(list(
"Teacher Mask"=findAvg(whoMask=c("t")),
"All Mask"=findAvg(whoMask=c("t","s"))
))
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
library(knitr)
opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.maxTime <- 150
default.catchRate <- 0.5
default.backgroundROI <- 428.7/100000 * default.catchRate
default.gammaParams <- c("spread.shape"=20.5,"spread.scale"=0.6,"recover.shape"=18.6,"recover.scale"=1.2)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=60/100,"TN"=95/100),"PCR"=list("TP"=90/100, "TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
default.pThreshold <- 2
default.quarantineTime=10
default.testDays <- c(0,3)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 6
default.teacherInfectible <- 3
default.teacherTeacher <- 12
default.classMult <- 3
default.nonClass <- 0.6
default.weekend <- c(0.3,2)
default.maxIPeriod <- 50
default.percVacc <- 0.25
default.vaccEff <- list("spread"=0.35,"catch"=0.6)
default.whoMask <- c("None")
default.maskEff <- 0.6
default.asymRate<-0.5
deafult.asymDiscount<-.75
findAvg <- function(classSize=default.classSize,noYears=default.noYears,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,pThreshold=default.pThreshold,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,classMult=default.classMult,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff,asymRate=default.asymRate,asymDiscount=deafult.asymDiscount, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, maxTime, backgroundROI, gammaParams, testType, probs, pThreshold, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, classMult, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff,asymRate,asymDiscount)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))), "populations"=populations/runs)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
combineFinal(list(
"No Vacc"=findAvg(percVacc=0),
"Half Vacc"=findAvg(percVacc=0.5),
"3/4 Vacc"=findAvg(percVacc=0.75),
"Full Vacc"=findAvg(percVacc=1)
))
combineFinal(list(
"Teacher Mask"=findAvg(whoMask=c("t")),
"All Mask"=findAvg(whoMask=c("t","s"))
))
library(knitr)
opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.maxTime <- 150
default.catchRate <- 0.5
default.backgroundROI <- 428.7/100000 * default.catchRate
default.gammaParams <- c("spread.shape"=20.5,"spread.scale"=0.6,"recover.shape"=18.6,"recover.scale"=1.2)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=60/100,"TN"=95/100),"PCR"=list("TP"=90/100, "TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
default.pThreshold <- 2
default.quarantineTime=10
default.testDays <- c(0,3)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 6
default.teacherInfectible <- 3
default.teacherTeacher <- 12
default.classMult <- 3
default.nonClass <- 0.6
default.weekend <- c(0.3,2)
default.maxIPeriod <- 50
default.percVacc <- 0.25
default.vaccEff <- list("spread"=0.35,"catch"=0.6)
default.whoMask <- c("None")
default.maskEff <- 0.6
default.asymRate<-0.5
deafult.asymDiscount<-.75
findAvg <- function(classSize=default.classSize,noYears=default.noYears,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,pThreshold=default.pThreshold,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,classMult=default.classMult,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff,asymRate=default.asymRate,asymDiscount=deafult.asymDiscount, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, maxTime, backgroundROI, gammaParams, testType, probs, pThreshold, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, classMult, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff,asymRate,asymDiscount)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))), "populations"=populations/runs)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
combineFinal(list(
"No Vacc"=findAvg(percVacc=0),
"Half Vacc"=findAvg(percVacc=0.5),
"3/4 Vacc"=findAvg(percVacc=0.75),
"Full Vacc"=findAvg(percVacc=1)
))
combineFinal(list(
"Teacher Mask"=findAvg(whoMask=c("t")),
"All Mask"=findAvg(whoMask=c("t","s"))
))
?is.NA(2)
is.na(2)
is.na(NA)
is.na(NaN)
library(knitr)
opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.maxTime <- 150
default.catchRate <- 0.7
default.backgroundROI <- 428.7/100000 * default.catchRate
default.gammaParams <- c("spread.shape"=20.5,"spread.scale"=0.6,"recover.shape"=18.6,"recover.scale"=1.2)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=60/100,"TN"=95/100),"PCR"=list("TP"=90/100, "TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
default.pThreshold <- 2
default.quarantineTime=10
default.testDays <- c(0,3)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 6
default.teacherInfectible <- 3
default.teacherTeacher <- 12
default.classMult <- 3
default.nonClass <- 0.6
default.weekend <- c(0.3,2)
default.maxIPeriod <- 50
default.percVacc <- 0.25
default.vaccEff <- list("spread"=0.35,"catch"=0.6)
default.whoMask <- c("None")
default.maskEff <- 0.6
default.asymRate<-0.5
deafult.asymDiscount<-.75
findAvg <- function(classSize=default.classSize,noYears=default.noYears,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,pThreshold=default.pThreshold,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,classMult=default.classMult,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff,asymRate=default.asymRate,asymDiscount=deafult.asymDiscount, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, maxTime, backgroundROI, gammaParams, testType, probs, pThreshold, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, classMult, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff,asymRate,asymDiscount)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))), "populations"=populations/runs)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
combineFinal(list(
"No Vacc"=findAvg(percVacc=0),
"Half Vacc"=findAvg(percVacc=0.5),
"3/4 Vacc"=findAvg(percVacc=0.75),
"Full Vacc"=findAvg(percVacc=1)
))
combineFinal(list(
"Teacher Mask"=findAvg(whoMask=c("t")),
"All Mask"=findAvg(whoMask=c("t","s"))
))
library(knitr)
opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.maxTime <- 150
default.catchRate <- 0.7
default.backgroundROI <- 428.7/100000 * default.catchRate
default.gammaParams <- c("spread.shape"=20.5,"spread.scale"=0.6,"recover.shape"=18.6,"recover.scale"=1.2)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=60/100,"TN"=95/100),"PCR"=list("TP"=90/100, "TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
default.pThreshold <- 2
default.quarantineTime=10
default.testDays <- c(0,3)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 6
default.teacherInfectible <- 3
default.teacherTeacher <- 12
default.classMult <- 3
default.nonClass <- 0.6
default.weekend <- c(0.3,2)
default.maxIPeriod <- 50
default.percVacc <- 0.25
default.vaccEff <- list("spread"=0.35,"catch"=0.6)
default.whoMask <- c("None")
default.maskEff <- 0.6
default.asymRate<-0.5
deafult.asymDiscount<-.75
findAvg <- function(classSize=default.classSize,noYears=default.noYears,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,pThreshold=default.pThreshold,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,classMult=default.classMult,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff,asymRate=default.asymRate,asymDiscount=deafult.asymDiscount, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, maxTime, backgroundROI, gammaParams, testType, probs, pThreshold, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, classMult, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff,asymRate,asymDiscount)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))), "populations"=populations/runs)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
combineFinal(list(
"No Vacc"=findAvg(percVacc=0),
"Half Vacc"=findAvg(percVacc=0.5),
"3/4 Vacc"=findAvg(percVacc=0.75),
"Full Vacc"=findAvg(percVacc=1)
))
combineFinal(list(
"Teacher Mask"=findAvg(whoMask=c("t")),
"All Mask"=findAvg(whoMask=c("t","s"))
))
library(knitr)
opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
source("sim.R")$value
default.classSize <- 30
default.noYears <- 6
default.maxTime <- 150
default.catchRate <- 0.7
default.backgroundROI <- 428.7/100000 * default.catchRate
default.gammaParams <- c("spread.shape"=20.5,"spread.scale"=0.6,"recover.shape"=18.6,"recover.scale"=1.2)
default.testType <- "Lateral"
default.probs <- list("Lateral"=list("TP"=60/100,"TN"=95/100),"PCR"=list("TP"=90/100, "TN"=99.2/100), "None"=list("TP"=0,"TN"=1))
default.pThreshold <- 2
default.quarantineTime=10
default.testDays <- c(0,3)
default.startingInfected <- 5
default.quarantineThreshold <- 30
default.teacherInfective <- 6
default.teacherInfectible <- 3
default.teacherTeacher <- 12
default.classMult <- 3
default.nonClass <- 0.6
default.weekend <- c(0.3,2)
default.maxIPeriod <- 50
default.percVacc <- 0.25
default.vaccEff <- list("spread"=0.35,"catch"=0.6)
default.whoMask <- c("None")
default.maskEff <- 0.6
default.asymRate<-0.5
deafult.asymDiscount<-.75
findAvg <- function(classSize=default.classSize,noYears=default.noYears,maxTime=default.maxTime,backgroundROI=default.backgroundROI,gammaParams=default.gammaParams,testType=default.testType,probs=default.probs,pThreshold=default.pThreshold,quarantineTime=default.quarantineTime,catchRate=default.catchRate,testDays=default.testDays,startingInfected=default.startingInfected,quarantineThreshold=default.quarantineThreshold,teacherInfective=default.teacherInfective,teacherInfectible=default.teacherInfectible,teacherTeacher=default.teacherTeacher,classMult=default.classMult,nonClass=default.nonClass,weekend=default.weekend,maxIPeriod=default.maxIPeriod,percVacc=default.percVacc,vaccEff=default.vaccEff,whoMask=default.whoMask,maskEff=default.maskEff,asymRate=default.asymRate,asymDiscount=deafult.asymDiscount, runs=10){
summary<-NULL
populations<-data.frame("S"=rep(0,maxTime),"I"=rep(0,maxTime),"Q"=rep(0,maxTime),"R"=rep(0,maxTime))
for (i in 1:runs){
res <- sim(classSize, noYears, maxTime, backgroundROI, gammaParams, testType, probs, pThreshold, quarantineTime, catchRate, testDays, startingInfected, quarantineThreshold, teacherInfective, teacherInfectible, teacherTeacher, classMult, nonClass, weekend, maxIPeriod, percVacc, vaccEff, whoMask, maskEff,asymRate,asymDiscount)
summary<-rbind(summary,res$summary)
populations<-populations+res$populations
}
result <- list("summary"=data.frame(t(colMeans(summary))), "populations"=populations/runs)
return(result)
}
str<-("Base case parameters:")
str<-paste(str,paste("Class size of",default.classSize),"\n",sep="")
str<-paste(str,paste(default.noYears,"years in the school"),"\n",sep="")
str<-paste(str,paste("Simulation runs for",default.maxTime,"time steps"),"\n",sep="")
str<-paste(str,paste("Background Rate of Infection of",default.backgroundROI),"\n",sep="")
str<-paste(str,paste("Individuals viral load over time modelled as gamma distribution with shape",default.gammaParams["spread.shape"],"and scale",default.gammaParams["spread.scale"]),"\n",sep="")
str<-paste(str,paste("Individuals probability of recovering over time modelled as gamma distribution with shape",default.gammaParams["recover.shape"],"and scale",default.gammaParams["recover.scale"]),"\n",sep="")
str<-paste(str,paste("Testing type is",default.testType,"which has true positive rate of",default.probs[[default.testType]]$TP,"and true negative rate of",default.probs[[default.testType]]$TN),"\n",sep="")
str<-paste(str,paste("Testing is done on days",toString(default.testDays)),"\n",sep="")
str<-paste(str,paste("Time spent quarantining is",default.quarantineTime,"days"),"\n",sep="")
str<-paste(str,paste("The base probability of catching the disease is",default.catchRate),"\n",sep="")
str<-paste(str,paste("Starting number of infected is",default.startingInfected),"\n",sep="")
str<-paste(str,paste("Threshold of quarantining individuals considered noteworthy is",default.quarantineThreshold),"\n",sep="")
str<-paste(str,paste("Teacher to their student infection multiplier set to", default.teacherInfective),"\n",sep="")
str<-paste(str,paste("Student to their teacher infection multiplier set to", default.teacherInfectible),"\n",sep="")
str<-paste(str,paste("Teacher to teacher infection multiplier set to", default.teacherTeacher),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in same class set to",  default.classMult),"\n",sep="")
str<-paste(str,paste("Infection multiplier for students in seperate classes set to",  default.nonClass),"\n",sep="")
str<-paste(str,paste("During weekends, probability of infection from school is multiplied by",default.weekend[1],"whilst infection from other sources is multiplied by",default.weekend[2]),"\n",sep="")
str<-paste(str,paste("The maximum possible time to be infectious is taken to be", default.maxIPeriod),"\n",sep="")
str<-paste(str,paste("It is taken that",(default.percVacc*100),"people are vaccinated, which is",(100*default.vaccEff$spread),"percent effective at reducing the spread from a vaccinated infected individual, and",(100*default.vaccEff$catch),"percent effective at reducing that chance of catching the disease"),"\n")
str<-paste(str,paste("We assume that the",toString(default.whoMask),"groups are mandated to wear masks, which is ",(100*default.maskEff),"percent effective at reducing transmission"),"\n")
cat(str)
popPlot<-function(data, label){
barplot(t(as.matrix(data)), col=c("cyan","yellow", "grey","red"), xlab="Days", ylab="Individuals", names.arg=(1:nrow(data)),main=label, cex.names=1.5)
legend("topright", colnames(data), fill=c("cyan","yellow", "grey","red"), bg="white",cex=1.5)
}
combineFinal<-function(dataList){
results<-NULL
for (i in names(dataList)){
results<-rbind(results,cbind(name=i,dataList[[i]]$summary))
popPlot(dataList[[i]]$populations,i)
}
kable(t(results))
}
combineFinal(list(
"Base Case"=findAvg()
))
combineFinal(list(
"PCR 1 p/w"=findAvg(testType = "PCR", testDays=c(1), pThreshold=1),
"Less Sensitive 3 p/w"=findAvg(testType = "Less", probs=list("Less"=list("TP"=0.2,"TN"=0.8)), testDays = c(0,3,5))
))
